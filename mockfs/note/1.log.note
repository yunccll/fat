1. Events  2020.10.6
    module init: Module_init(), Module_exit()
    mount & unmount:  SYSCALL_DEFINE (mount)    SYSCALL_DEFINE  (unmount)
    open: create & open_exist
          create flags:
          open_exist flag:
    lseek:
    read:
    write:
    flush:
    release
    fsync:
    fasync:


    
    mmap 
    get_unmapped_area
    lock
    flock
    sendpage
    splice_write
    splice_read
    setlease
    fallocate
    show_fdinfo
    copy_file_range
    remap_file_range
    fadvise

    dir:
        readdir

misc:
    async_io
    polling


2.  Mount  2020.10.6
    mount
        char * dev_name, 
        char * dir_name, 
        char * type, 
        unsigned long flags 
        void * data
/fs/namespace.c
SYSCALL_DEFINE5(mount, char __user *, dev_name, char __user *, dir_name,
     char __user *, type, unsigned long, flags, void __user *, data)

    
  1>. copy_mount_string(dev_name)  
      ==> char * kernel_string = strndup_user(dev_name, PATH_MAX); //mm/util.c (mem operations), free by kfree(ptr)
      NOTE:
        memory operations: kmalloc, kzmalloc, kfree| vmalloc, vfree
        strndup_user
        strnlen_user
        copy_from_user
     
 2>. copy_mount_options(data)
    2.1> char * kernel_options = kmalloc(PAGE_SIZE, GFP_KERNEL);
    2.2> copy_from_user(kernel_options, data, PAGE_SIZE - offset_in_page(data))
    2.3> memset(kernel_options + size, 0, offset_in_page(data));

 3>. do_mount(kernel_dev, dir_name, kernel_type, flags, kernel_options);

    3.1> user_path_at(AT_FDCWD, __user dir_name, LOOKUP_FOLLOW, &path); //fs/namei.c (maybe use kern_path)
      find the dir_name 's path object;
      details: path_walk to find the path object 
        : 1. first use dentry 
          2. and then use dir->i_op->lookup(dir, dentry, flags)

    3.2 create mnt_flags with flags 
        //TODO: details:

    3.3  do real work
        case 1:
            do_reconfigure_mnt(&path, mnt_flags); 
        case 2:
            do_remount(&path, flags, sb_flags, mnt_flags, data_page);
        case 3:
            do_loopback(&path, dev_name, flags & MS_REC);
        case 4:
            do_change_type(&path, flags);
        case 5:
            do_move_mount_old(&path, dev_name); 
        default:     6.
            do_new_mount(&path, type_page, sb_flags, mnt_flags, dev_name, data_page);
            1> struct file_system_type * type = get_fs_type((char*)fstype);  

            2> struct fs_context * fc = fs_context_for_mount(type, sb_flags); //fs/fs_context.c
                (********) call the init_fs_context (******)
                init_fs_context = legacy_init_fs_context; 
                ret = init_fs_context(fc);  ==> setup(fc->ops); fc->ops = &legacy_fs_context_ops;
            3> put_filesystem(type); //release the struct file_system_type * type

            4> err = vfs_get_tree(fc);  // call mount from struct filesystem_type // fs/super.c
                error = fc->ops->get_tree(fc) ==> get_tree = &legacy_get_tree
                (********) legacy_get_tree: (*******)
                ==> fc->fs_type->mount(fc->fs_type, fc->sb_flags,fc->source, ctx->legacy_data);

            5> err = do_new_mount_fc(fc, path, mnt_flags);
                create & add struct vfs_mnt * to list

            6> put_fs_context(fc);   free struct fs_context object backward to 2>

    3.4: path_put(&path);  release the &path object , backward to 3.1
 


2020.10.7
1. inode operations creation
    step:
        mount event: create root inode , install root_inode with msdos_dir_inode_operations
        open Event:  call .lookup in msdos_dir_inode_operations to build inode 
        create Event: call .create of msdos_dir_inode_operations to build inode
        mkdir Event: call .mkdir of msdos_dir_inode_operations to build inode
        .lookup , .create, .mkdir will call fat_build_inode to  set the inode->i_op, inode->i_fop with proper operations

details:
    mount Event:
    > fat_fill_super 
        -> save MSDOS_SB(sb)->dir_ops = &msdos_dir_inode_operations;
        -> create root_inode: call fat_read_root(root_inode)
            ->  inode->i_op = sbi->dir_ops; //msdos_dir_inode_operations
                inode->i_fop = &fat_dir_operations;
   > msdos_dir_inode_operations:
    .create //call fat_build_inode
    .lookup //call fat_build_inode
    .mkdir  //call fat_build_inode

  > fat_build_inode:
    call > fat_fill_inode(inode, de){
        if (de->attr & ATTR_DIR){
            inode->i_op = sbi->dir_ops;//msdos_dir_inode_operations: .create, .lookup, .mkdir
            inode->i_fop = &fat_dir_operations; //file_dir_operations
        }
        else{
            inode->i_op = &fat_file_inode_operations;
            inode->i_fop = &fat_file_operations;
            inode->i_mapping->a_ops = &fat_aops;
        }
    }

