0. WTF/min 是衡量代码de标志

1. clean code that works 
    
2. 两条规则of TDD
    >Don't write a line of new code unless you first have a failing automated test.
        有了一个可以失败的自动化案例，才去写代码 (实现)
    >Eliminate Duplication
        消除重复

规则的技术含义：
technical implications : 
    > You must design organically, with running code providing feedback between decisions.
        基于多个方案代码的运行反馈进行有机的设计
    > You must write you own tests, since you cann't wait twenty times a day for someone else to write test.
        你需要编写自己的测试，因为你不能花很长的时间等待别人写测试
    > You development environment must provide rapid response to small change
        开发环境即可对小修改有快速的反应
    > Your design must consist of many [highly cohesive, loosly coupled] components, just to make testing easy 
        为使测试简单，设计由许多高内聚、低耦合的组件组成

两条规则蕴含开发过程中的阶段：
    > Red -- write a little test that doesn’t work, perhaps doesn’t even compile at first
        不可运行  写一个不能工作的测试程序，一开始这个测试程序甚至不能编译
    > Green -- make the test work quickly, committing whatever sins necessary in the
    process
        可运行-- 尽快让这个测试程序工作，为此可以在程序中使用一些不合情理的方法。
    > Refactor -- eliminate all the duplication created in just getting the test to work
        重构 -- 消除所有为了测试通过而造成的重复

不可运行/可运行/重构





3. 测试驱动开发 教你认识编程过程中的测试反馈与需要实现的构思之间的差距,并提供了控制这个差距大小的技术。
    两点：认识差距  和  控制差距大小
    其中，差距是 测试的反馈 和 构思之间



TDD的过程：
    1) 快速新增一个测试
    2) 运行所有测试，发现最近失败那个
    3) 做点小改动
    4) 运行所有的测试，并且全部通过
    5) 重构并消除重复


补充材料：
Dependency & Duplication

Steve Freeman ： 测试程序与代码的问题 不在于Duplication，而在于他们之间的Dependency。
也就是说： Test Case 与 代码 的主要问题是Dependent on something.

Dependency 的表现: 改动其中一个而不改动另外一个。

Dependency 是软件开发中的关键问题.



TDD Step:
1) Write Test case,  你再写一个Story,设想你希望拥有的interface，在story中包含你所能想到的





快速变绿的两个策略
    Fake it --> 返回一个常量，然后慢慢使用变量替换直到真是代码
    Obvious Implementation --> 输入真实的实现
实践中是 Obvious Impl 后继续 Obvious Impl;  如果发现失败, and 蜕化到 fake it 直到 green, 继续Obvious Impl.

第三种Style的驱动开发，Triangulation(三角定位法）:
    > 将Design Objection 翻译成失败的测试案例（有Side Effects) .
    > 快速与一个Stub Impl编译通过
    > 输入看起来正确的代码to made the Test work，

Translation of a feeling into a test is a common theme of TDD.



Isolate Change   ( change code not effect testcase , change testcase not effect code)
TODO: sum array
s1.  ASSERT_EQ(5, sum(5));
    int sum(int value) { 
        return value; 
    }
    compile & run OK

s2. ASSERT_EQ(5, sum(5, new int[]{5});
    int sum(int value, int [] array){
        return value;
    }
    compile & run OK , change interafce for next step [only change the impl to new function]

s3. ASSERT_EQ(5, sum(5, new int[]{5});
    int sum(int value, int [] array){
        int ret = 0;
        for(int i = 0; i < array.size(); ++i){
            ret += array[i];
        }
        return ret;
    }
    compile & run OK, change impl for sum(arr);

s4. ASSERT_EQ(5, sum(new int[]{5}));
    int sum(int [] arrray){
        ....
    }
    compile & run OK, change new interafce  for sum(array)

s5. ASSERT_EQ(5, sum(new int[]{5}));
    ASSERT_EQ(12, sum(new int[]{5, 7}));
    Triangulation for validation





Performance of tests
    we would like our tests to run as quickly as possible
Isolation of tests
    we would the success or failure of one test to be irrelevant to other tests

Test coupling
    can have an obvious nasty effect, where breaking one test causes the next ten to fail even though the code is correct. 
Test coupling 
    can have a subtle really nasty effect, where the order of tests matters. 





Patterns of Test Driven Development
Index : Test n  -> Isolated Test -> Test List ->  Test-First  -> Assert First  -> Test Data -> Evident Data

1>. Test n 
 -- How do you test your software? Write an automated test.
如何解决正反馈的问题

This is a positive feedback loop. The more stress you feel, the less testing you will do.
The less testing you do, the more errors you will make. The more errors you make, the
more stress you feel. Rinse and repeat.
How do you get out of such a loop? Either introduce a new element, replace one of the
elements, or change the arrows. In this case we’ll replace “testing” with “automated
testing”.

2>. Isolated Test
  -- How should the running of tests affect each other? Not at all.

3>. Test List 
  -- What should you test? Before you begin, write a list of all the tests you know you will
have to write.

The first part of our strategy for dealing with programming stress is to never take a
step forward unless we know where our foot is going to land.
    
3.1> Big positive feedback loop::
    The more experience I accumulated, the more things I knew that might need to be done. 
    The more things I knew might need to be done, the less attention I had for what I was doing. 
    The less attention I had for what I was doing, the less I accomplished. 
    The less I accomplished, the more things I knew that needed to be done.

How to write Test list: 
Applied to test-driven development, what we put on the list are the tests we want to implement.
First, put on the list examples of every operation that you know you need to implement.
    e.g.  $5 + $2 = $7
Next, for those operations that don’t already exist, put the null version of that operation. 
    e.g. sub, multiply, divide 
Finally, list all the refactorings that you think you will have to do to have clean code at the end of this session.
    e.g. use the operator to replace function
         extract $ to an object 

4>. Test-First 
When should you write your tests? Before you write the code that is to be tested

A way to break stress and testing positive feedback loop.
    The more stress you feel, The less testing you will do
    The Less testing you do, The more errors you will make.
	The more errors you make, The more stress you will feel.
    Write Test-First to break the loop

5>. Assert-First 
When should you write the asserts? Try writing them first. (before the write test)

· Where should you start building a system? With the stories that you will be
able to tell about the system when it is done.
    理解 ===> Strories is done, you can start buiding a system.

· Where should you start writing a bit of functionality? With the tests that will run when it is done.
    理解 ==> test is done , you can start write a bit of functionality

· Where should you start writing a test? With the asserts that will pass when it is done.
   理解==> asserts is done, you can start write a test

理解： Order of TDD:    write Story -> write assert -> write test 



不考虑实现，光写测试就得一次解决好几个问题,问题如下：
When you are writing a test, you are solving several problems at once,  even if you no longer have to think about the implementation.

· Where does the functionality belong? 
    Is it a modification of an existing method, 
    a new method on an existing class, 
    an existing method name implemented in a new place, 
    or a new class?

· What should the names be called?

· How are you going to check for the right answer?

· What is the right answer?

· What other tests does this test suggest?

逆向考虑结果（Assert）， 从Assert 反推过程.
注意这一章的例子：假设想写一个与远程系统通讯的test， 
首先考虑结果：Assert： 读到明确的信息"abc"
    void testcompleteReadSomething(){
        ......
        ASSERT_EQ("abc", reply.contents());
    }
    reply从哪里来, reader 
    void testcompleteReadSomething(){
        ....
        reply = reader.read() 
        ASSERT_EQ("abc", reply.contents());
    }
    reader从哪里来, create socket for reader
    void testcompleteReadSomething(){
        .....
        socket = new Socket("localhost", remotePort).
        reader = socket.createReader();
        reply = reader.read() 
        ASSERT_EQ("abc", reply.contents());
    }
    socket启动前，需要remotePort起来
    void testcompleteReadSomething(){
        Server s = new Server(remotePort);
        socket = new Socket("localhost", remotePort).
        reader = socket.createReader();
        reply = reader.read() 
        ASSERT_EQ("abc", reply.contents());
    }
    Refactor it :
    void testcompleteReadSomething(){
        Server ser = new Server(remotePort);
        Writer wr = ser.createWriter();

        socket = new Socket("localhost", remotePort).
        wr.write("abc");
        reader = socket.createReader();
        reply = reader.read() 
        ASSERT_EQ("abc", reply.contents());
        reader.close();
        socket.close();
        wr.close();
        ser.close();
    }


5> Test Data
 -- What data do you use for test-first tests? Use data that makes the tests easy to read and
follow.

6> Evident Data 
 -- How do you represent the intent of the data? Include expected and actual results in the
test itself, and try to make their relationship apparent.
e.g.
    Exchange bank= new Exchange().
    bank.addRate("USD", "GBP", STANDARD_RATE);
    bank.commission(STANDARD_COMMISSION);
    Money result= bank.convert(new Note(100, "USD"), "GBP");
    [assertEquals(new Note(49.25, "GBP"), result);]
or we could try to make the calculation obvious:
    Exchange bank= new Exchange().
    bank.addRate("USD", "GBP", 2);
    bank.commission(0.0015);
    Money result= bank.convert(new Note(100, "USD"), "GBP");
    [assertEquals(new Note(100 / 2 * (1 - 0.0015), "GBP"), result);]

缺点 : 可能导致dependency between code and tests

    
Patterns of TDD Implementation -- Strategies of Implementation
Index -> Fake It (til you make it)  -> Triangulate -> Obvious implementation -> One to many


TDD is not about blindly following a set of rules for how to program. It is about
intelligently choosing the size of your programming steps and the amount of feedback
depending on conditions.

Taking small steps forwards is the destination of all patterns in TDD implementation


1> Fake It (til You Make It)
    -- What is your first implementation once you have a broken test? Return a constant.
Once you have the test running, gradually transform the constant into an expression
using variables.


There are a couple of effects that make Fake It Til You Make It powerful:
    -- Psychological
  Having a green bar is completely different than not having a green bar. When the bar is green, you know where you stand. Refactoring from there you can do with confidence.
    -- Scope control
  Programmers are good at imagining all sorts of future problems. Starting with one concrete example and generalizing from there prevents you from prematurely confusing yourself with extraneous concerns. You can do a better job of solving the immediate problem because you are focused. When you go to implement the next test case, you can focus on that one, too, knowing that the previous test is guaranteed to work.

e.g. 
    assertEquals(new MyDate("28.2.02"), new MyDate("1.3.02").yesterday());
MyDate
    public MyDate yesterday()
    {
        return new MyDate("28.2.02");
    }
There is duplication between the test and the code. I can shift it around by writing
MyDate
    public MyDate yesterday()
    {
        return new MyDate(new MyDate("31.1.02").days()-1);
    }
But there is still duplication. However, I can eliminate the data duplication (because
this = MyDate(“31.1.02”) for the purposes of my test) by writing:
MyDate
    public MyDate yesterday()
    {
        return new MyDate(this.days()-1);
    }


2> Triangulate
    -- How do you most conservatively drive abstraction with tests? Only
abstract when you have two or more examples.

e.g. 
    public void testSum() {
        assertEquals(4, plus(2, 2));
    }
    private int plus(int augend, int addend) {
        return 4;
    }

    Triangulate : 
    public void testSum() {
        assertEquals(4, plus(2, 2));
        assertEquals(7, plus(3,4));
    }
    private int plus(int augend, int addend) {
        return augend + addend;
    }

I only use triangulation when I’m really, really unsure about the correct abstraction for
the calculation. Otherwise I rely on either Obvious Implementation or Fake It. 


3> Obvious Implementation
How do you implement simple operations? Just implement them.

For example, would I really use Fake It to implement something as simple as plus()? Not usually. I would just type in the obvious implementation. If I noticed I was getting surprised by red bars, I would go to smaller steps.

4> One to Many
    -- How do you implement an operation that works with collections of objects? Implement it without the collections first, then make it work with collections




Process
    -- patterns of when you write a test, tests and when you stop
Index ->> One step Test ->> Starter Test ->> Explanation Test ->> Another Test ->> Break ->> Do Over ->> Cheap Desk, Nic Chair

These patterns are about when you write a test, where you write tests, and when you stop

1> One Step Test
Which test should you pick next from the list? Pick a test that will teach you something and that you are confident you can implement.

Each test should represent one step towards your overall goal. 

If you don’t find any test on the list that represents one step, add some new tests that
would represent progress towards the items there.

2>.  Starter Test 
Which test should you start with? Start by testing a variant of an operation that doesn't do anything.
你从针对某个简化操作的测试开始，该测试可能个空操作（可能是空的，可能是最简单的那个）


The first question you have to ask with a new operation is "Where does it belong?"
you don't know what to type for the test until you've answered this question.

Tips: solving one problem at a time.

You can shorten the loop by choosing inputs and outputs that are trivially easy to discover.


e.g. how to write a polygon(多边形) reducer test-first. 
	The input is a mesh of polygons(多边形网格) and 
	the output is a mesh of polygons(多边形网格) that describes precisely the same surface
	
	
answer:
	The output should be the same as the input.
	The input should be as small as possible, like a single polygon, or even an empty list of polygons.
	

3> Explanation Test
How do you spread the use of automated testing? 
如何推广运用自动化测试？ 
Ask for and give explanations in terms of tests.
以测试来沟进行沟通, 使用测试案例进行交流

4> Another Test 
How do you keep a technical discussion from straying off topic? 
如何保证技术讨论不要离题？
When a tangential idea arises, add a test to the list and go back to the topic.
当一个正切的idea出现，增加一个测试项继续讨论原来的主题

5> Regression Test
What's the first thing you do when a defect is reported? 
当报缺陷时，你第一想到的是什么？
Write the smallest possible test that fails, and that once it runs, the defect will be repaired.
写一个最小的失败案例，一旦该案例通过，缺陷就会被修复


7> Break
What do you do when you feel tired or stuck? Take a break.
当你感觉累或者卡住了你怎么办？ 
休息下

8> Do over
What do you do when you are feeling lost(不知所措)? 
当你感到不知所措时，怎么办？
Throw away the code and start over(重新开始).
扔掉代码，离开一段时间，再重新开始


9> Cheap Desk, Nice chair
What physical setup should you use for test-driven development? 
Get a really nice chair, skimping on the rest of the furniture if necessary.




Testing Techniques  (TODO: 构思一些例子)
Index -> Child Test --> Mock Object --> Self Shunt --> Log String --> Crash Test Dummy --> Broken Test --> Clean Check-in

1> Child Test	 ( break into pieces)
How do you get a test case running that turns out to be too big? 
	- Write a smaller test case that represents the broken part of the bigger test case. 
	- Get the smaller test case running. 
	- Reintroduce the larger test case.

2> Mock Object
How do you test an object that relies on an expensive or complicated resource? 
Create a fake version of the resource that answers constants.

3> Self Shunt
How do you test that one object communicates correctly with another? 
Have the object under test communicate with the test case instead of with the object it expects.
为了测试对象与其他对象的通信关系。 不需要构造其他对象, 而是直接创建一个test object 替代其他对象，然后运行该test object

4> Log String
How do you test that the sequence in which messages are called is correct? 
Keep a log in a string, and append to the string when a message is called.

5> Crash Test Dummy
How do you test error code that is unlikely to be invoked? 
Invoke it anyway with a special object that throws an exception instead of doing real work.

class FullFileTest : public File {
public:
			
};
int saveFile(File * file){
	int ret = 0;
	foreach(block : files){
		ret = writeFile(block));
		if(ret != 0){
			//close file
			return ret;
		}
	}
	//close file
	return ret;
}

void testSaveFile(){
	File f = new FullFile();
	ASSERT_EQ(ENO_FULL_FILE == saveFile(f));
}

6> Broken Test
How do you leave a programming session when you’re [programming alone]? 
Leave the last test broken.

用于快速回到之前上下文

7> Clean Check-in
How do you leave a programming session when you’re [programming in a team]?
Leave all the tests running.




Design Patterns

1> Null Object 
How do you represent special cases using objects? 
Create an object representing the [special case]. 
Give it the [same protocol as the regular objects].
//TODO: add the example from TDD book;


2> Command
3> Template Method
4> Composite
5> Pluggable Object

6> Collecting Parameter
How do you collect the results of an operation that is spread over several objects? 
Add a parameter to the operation in which the results will be collected.

7> Value Object
How do you design objects that will be [widely shared], but for whom identity is unimportant? 
Set their state when they are created and never change it. 
Operations on the object always return a new object.
[reduce the dependency from code], [no side effects for shared object]
//TODO: add the example from TDD book;

8> Imposter



Refactoring
Usually, a refactoring cannot change the semantics of the program under any circumstances. 
In TDD, the circumstances we care about are the tests that are already passing.
正常情况下的重构是 在任何情况下保持程序的语义
TDD中，我们不是关注程序的语义，而是关注已经通过的tests必须继续通过; 可能修改程序的语义。
都是重构object code

for example, we can replace constants with variables in TDD can call this operation a refactoring, because it doesn’t change the set of tests that pass.
例如： 我们从常量修改为变量，改变了语义，但是没有改变测试案例集的变化，也称之为重构(in TDD)


1> Reconcile Differences (调和差异)
How do you unify two similar looking pieces of code? 
Gradually bring them closer.
[not??] Unify them only when they are absolutely identical.
TODO: e.g. 

2> Isolate Change 
How do you change one part of a multi-part method or object? 
First, isolate the part that has to change.
TODO: e.g. 

3> Migrate Data
how do you move from one representation? Temporarily duplicate the data.
TODO: e.g. 

4> Extract Method
TODO: e.g. 
5> Inline Method
TODO: e.g. 
6> Extract Interface
TODO: e.g. 
7> Move Method
TODO: e.g. 
8> Method Object
How do you represent a complicated method that requires several parameters and local variables? 
	- Make an object out of the method.
TODO: e.g. 
9> Add Parameter
How do you add a parameter to a method? 
How:
1. If the method is in an interface, add the parameter to the interface first
2. Use the compiler errors to tell you what other code you need to change
TODO: e.g. 

10> Method Parameter to Constructor Parameter
How do you move a parameter from a method or methods to the constructor?
How:
	1. Add a parameter to the constructor
	2. Add an instance variable with the same name as the parameter
	3. Set the variable in the constructor
	4. One by one, convert references to “parameter” to “this.parameter”
	5. When no more references exist to the parameter, delete the parameter from the
	method and all caller
	6. Remove the now-superfluous “this.” from references
	7. Rename the variable correctly
TODO: e.g. 
